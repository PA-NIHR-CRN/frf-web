name: FRF Web Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment you will run the jobs on. Accepted values: dev, test, uat, oat, prod'
        options: ['dev', 'test', 'uat', 'oat', 'prod']
        required: true
        default: 'dev'

env:
  AWS_REGION: eu-west-2

jobs:
  build:
    name: "Build - ${{ github.event.inputs.environment || 'dev' }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - name: Install
        run: npm ci --no-audit --no-fund
      - name: Build
        run: |
          touch .env.local
          echo CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }} >> .env.local
          echo CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN }} >> .env.local
          echo CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }} >> .env.local
          echo CONTENTFUL_MANAGEMENT_ACCESS_TOKEN=${{ secrets.CONTENTFUL_MANAGEMENT_ACCESS_TOKEN }} >> .env.local
          echo CONTENTFUL_ENVIRONMENT=${{ vars.CONTENTFUL_ENVIRONMENT }} >> .env.local
          npm run build
      - name: Test
        run: npm run test:ci

  deploy:
    needs: build
    name: "FRF Web Deploy - ${{ github.event.inputs.environment || 'dev' }}"
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTIONS_ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Determine Account Prefix
        id: determine-account-prefix
        run: |
          declare -A ENV_TO_PREFIX_MAP=(
              ["dev"]="crnccd"
              ["test"]="crnccd"
              ["uat"]="crnccs"
              ["oat"]="crnccp"
              ["prod"]="crnccp"
          )
          echo "::set-output name=account-prefix::${ENV_TO_PREFIX_MAP[${GITHUB_ACTIONS_ENVIRONMENT}]}"
      - uses: actions/checkout@v2.1.0
      - name: Configure AWS credentials (dev/test)
        uses: aws-actions/configure-aws-credentials@v1
        if: env.GITHUB_ACTIONS_ENVIRONMENT == 'dev' || env.GITHUB_ACTIONS_ENVIRONMENT == 'test'
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure AWS credentials (uat)
        uses: aws-actions/configure-aws-credentials@v1
        if: env.GITHUB_ACTIONS_ENVIRONMENT == 'uat'
        with:
          aws-access-key-id: ${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure AWS credentials (oat/prod)
        uses: aws-actions/configure-aws-credentials@v1
        if: env.GITHUB_ACTIONS_ENVIRONMENT == 'oat' || env.GITHUB_ACTIONS_ENVIRONMENT == 'prod'
        with:
          aws-access-key-id: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: ${{ steps.determine-account-prefix.outputs.account-prefix }}-ecr-${{ env.GITHUB_ACTIONS_ENVIRONMENT }}-frf-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: frf-web
          IMAGE_SHA_TAG: frf-web-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build --build-arg CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }} --build-arg CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN }} --build-arg CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }} --build-arg CONTENTFUL_MANAGEMENT_ACCESS_TOKEN=${{ secrets.CONTENTFUL_MANAGEMENT_ACCESS_TOKEN }} --build-arg CONTENTFUL_PREVIEW_MODE=${{ vars.CONTENTFUL_PREVIEW_MODE }} --build-arg CONTENTFUL_ENVIRONMENT=${{ vars.CONTENTFUL_ENVIRONMENT }} --build-arg NEXT_REVALIDATE_TIME=${{ vars.NEXT_REVALIDATE_TIME }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG"
      - name: Generate task definition file from container
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.determine-account-prefix.outputs.account-prefix }}-ecs-${{ env.GITHUB_ACTIONS_ENVIRONMENT }}-frf-task-definition --query taskDefinition > ./task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: ./task-definition.json
          CONTAINER_NAME: ${{ steps.determine-account-prefix.outputs.account-prefix }}-ecs-${{ env.GITHUB_ACTIONS_ENVIRONMENT }}-frf-container
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: ${{ steps.determine-account-prefix.outputs.account-prefix }}-ecs-${{ env.GITHUB_ACTIONS_ENVIRONMENT }}-frf-service
          ECS_CLUSTER: ${{ steps.determine-account-prefix.outputs.account-prefix }}-ecs-${{ env.GITHUB_ACTIONS_ENVIRONMENT }}-frf-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  e2e-test:
    name: FRF E2E Tests
    needs: deploy
    if: ${{ github.event.inputs.environment }} == 'test'
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright
      run: npx playwright install --with-deps
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
        aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Get Github Actions Runner Public IP
      id: ip
      uses: haythem/public-ip@v1.3
    - name: Add Github Actions IP to LB security group
      run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.LB_SG_TEST }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.ip.outputs.ipv4 }}/32", "Description": "GitHub runner IP for FRF automation test run"}]}]'
    - name: Run FRF E2E Tests in TEST
      run: npx playwright test
      env:
        ENV_CONTEXT: "TEST"
    - name: Remove Github Actions IP from LB security group
      run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.LB_SG_TEST }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.ip.outputs.ipv4 }}/32", "Description": "GitHub runner IP for FRF automation test run"}]}]'
    - name: Upload HTML Report as artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-report
        path: qa/test-report/
        retention-days: 3
    - name: "Download HTML Report Artifact"
      uses: actions/download-artifact@v3
      id: download
      if: always()
    - name: Publish to GH Pages
      if: always()
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{steps.download.outputs.download-path}}/qa/test-report/
        branch: gh-pages

  send-slack-message-failure:
    name: Send slack message E2E Test Failures
    needs: e2e-test
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Slack Notify
        if: github.ref == 'refs/heads/tests/feature-frf-5-site-menu''
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.FRF_SLACK_WEBHOOK }}
          SLACK_COLOR: "failure"
          SLACK_MESSAGE: "FRF E2E Regression Tests Failed in ${{ env.ENV_MSG }}! :face_with_thermometer:"
          SLACK_TITLE: "FRF E2E UI Tests - ENV:TEST : FAILURE :x:"

  send-slack-message-success:
    name: Send slack message E2E Test Success
    needs: e2e-test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Slack Notify
        if: github.ref == 'refs/heads/tests/feature-frf-5-site-menu'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.FRF_SLACK_WEBHOOK }}
          SLACK_COLOR: "success"
          SLACK_MESSAGE: "FRF E2E Regression Tests Passed in ${{ env.ENV_MSG }}! :partying_face:"
          SLACK_TITLE: "FRF E2E UI Tests - ENV:${{ env.ENV_MSG }} : SUCCESS :tick:"