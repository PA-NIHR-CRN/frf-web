name: FRF Web Build

on:
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  FRF_USER_AGENT: ${{ vars.FRF_USER_AGENT }}
  E2E_BASE_URL: ${{ vars.E2E_BASE_URL }}

permissions:
  id-token: write
  contents: read

jobs:
  # Install dependencies
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - name: Install
        run: npm ci --no-audit --no-fund

  # Build project
  build:
    name: Build
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            crnccd-secret-dev-frf-app-config
          parse-json-secrets: true

      - name: Build
        run: |
          touch .env.local
          echo DATABASE_URL=${{ env.CRNCCD_SECRET_DEV_FRF_APP_CONFIG_DATABASE_URL }} >> .env.local
          echo CONTENTFUL_SPACE_ID=${{ env.CRNCCD_SECRET_DEV_FRF_APP_CONFIG_CONTENTFUL_SPACE_ID }} >> .env.local
          echo CONTENTFUL_ACCESS_TOKEN=${{ env.CRNCCD_SECRET_DEV_FRF_APP_CONFIG_CONTENTFUL_ACCESS_TOKEN }} >> .env.local
          echo CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ env.CRNCCD_SECRET_DEV_FRF_APP_CONFIG_CONTENTFUL_PREVIEW_ACCESS_TOKEN }} >> .env.local
          echo CONTENTFUL_MANAGEMENT_ACCESS_TOKEN=${{ env.CRNCCD_SECRET_DEV_FRF_APP_CONFIG_CONTENTFUL_MANAGEMENT_ACCESS_TOKEN }} >> .env.local
          echo CONTENTFUL_ENVIRONMENT=${{ vars.CONTENTFUL_ENVIRONMENT }} >> .env.local
          echo NEXT_PUBLIC_APP_ENV=${{ vars.APP_ENV }} >> .env.local
          echo E2E_BASE_URL=${{ env.E2E_BASE_URL }} >> .env.local
          echo FRF_USER_AGENT=${{ env.FRF_USER_AGENT }} >> .env.local

          npm run build
          npx prisma generate

  # Code quality checks
  quality-checks:
    name: Lint
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Quality check
        run: npm run lint

  # Unit tests
  unit-tests:
    name: Unit tests
    permissions: write-all
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Unit tests
        run: npm run test:ci
      - name: Unit tests coverage comment
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: ./coverage/coverage-summary.json
          junitxml-path: ./junit.xml
          title: Unit tests coverage
